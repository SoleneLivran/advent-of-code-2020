<?php

$input = file_get_contents(__DIR__ . '/input-aoc7.txt');

$input = trim($input);

$instructions = explode("\n", $input);

$colors = [];

// For each instruction...
foreach ($instructions as $instruction) {
    //...extract the colors :
    preg_match_all(
        "/(?P<color>[a-z ]+) bag(s?)/",
        $instruction,
        $instructionColors
    );

    // the containing color is the first found color
    $containingColor = $instructionColors['color'][0];

    // the contained colors are the other found colors
    // for each contained color...
    for ($containedColorIndex = 1; $containedColorIndex <= count($instructionColors['color']); $containedColorIndex ++) {
        if (array_key_exists($containedColorIndex, $instructionColors['color'])) {
            $currentColor = trim($instructionColors['color'][$containedColorIndex]);
            // if it's not already in $colors[]
            if (!array_key_exists($currentColor, $colors)) {
                //add it to $colors (as $colors[color] = [])
                $colors[$currentColor] = [];
            }
            // if the containing color is not in color at the index of the current color...
            if (!in_array($containingColor, $colors[$currentColor])) {
                // ...add it as a containing color for the current color
                $colors[$currentColor][] = $containingColor;
            }
        }
    }
}

//var_dump($colors);

// calculate how many bag colors can contain the relevant color
function calculateBags(array $colors, string $color): array {

    // keep found bag colors in an array
    $bags = [];

    // if there is no value in the colors array at the index of the color we are looking at :
    // this color can't be contained in other colors.
    // return the bags array.
    if (!isset($colors[$color])) {
        return $bags;
    }

    // each value in the colors array at the relevant key is a possible containing bag color
    foreach ($colors[$color] as $containingColor) {
        // add this "parent" color to the bags array
        $bags[] = $containingColor;
        // call the function again, but on the parent color instead of the initial color
        // and merge the newly generated bags array with the previous bags array
        $bags = array_merge($bags, calculateBags($colors, $containingColor));
    }

    return $bags;
}

// call our function with "shiny gold" as our relevant function
// remove duplicates from the bags array generated by our function
// count the number of results
echo count(array_unique(calculateBags($colors, 'shiny gold')));
